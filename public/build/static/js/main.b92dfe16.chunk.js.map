{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","InputRef","useRef","useState","ingredientList","updateIngredientList","Loading","setLoading","SearchForRecipe","query","url","fetch","then","response","json","res","console","log","hits","catch","err","useEffect","className","class","ref","type","placeholder","onClick","current","value","map","item","recipe","label","src","image","ingredientLines","step","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAwEeA,MAlEf,WAEE,IAKMC,EAAUC,iBAAO,MAPV,EAQiCC,mBAAS,IAR1C,mBAQNC,EARM,KAQSC,EART,OASgBF,oBAAS,GATzB,mBASNG,EATM,KASEC,EATF,KAePC,EAAiB,SAACC,GACtBF,GAAW,GACX,IAAIG,EAAG,mBAAeD,EAAf,mBANM,WAMN,oBAPO,oCAQdE,MAAMD,GAAKE,MAAK,SAAAC,GACd,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACNC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAIG,MAChBb,EAAqBU,EAAIG,MACzBX,GAAW,MAEZY,OAAM,SAAAC,GACLJ,QAAQC,IAAI,QAASG,GACrBb,GAAW,OASf,OANAc,qBAAU,WAEZb,EAAgB,aACX,IAID,qBAAKc,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKC,MAAM,eAAX,UACE,uBAAOC,IAAKvB,EAAWwB,KAAK,OAAOC,YAAY,wBAC/C,wBAAQC,QAxCH,WAEXnB,EAAgBP,EAAS2B,QAAQC,OACjC5B,EAAS2B,QAAQC,MAAM,IAqCjB,uBAEDvB,GAAW,2CACZ,qBAAKgB,UAAU,UAAf,SACGlB,EAAe0B,KAAI,SAAAC,GAClB,OACE,sBAA8BT,UAAU,aAAxC,UACE,+BAAOS,EAAKC,OAAOC,QACnB,qBAAKC,IAAKH,EAAKC,OAAOG,QACtB,qBAAMb,UAAU,QAAhB,SACCS,EAAKC,OAAOI,gBAAgBN,KAAI,SAACO,EAAKC,GACjC,OAAO,4BAAgBD,GAARC,UALZP,EAAKC,OAAOC,kBC1CtBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b92dfe16.chunk.js","sourcesContent":["\nimport './App.css';\nimport { useEffect, useState ,useRef} from \"react\";\n\n\n\nfunction App() {\n\n  const search=()=>{\n    \n    SearchForRecipe(InputRef.current.value);\n    InputRef.current.value=\"\";\n  }\n  const InputRef =useRef(null);\n  const [ingredientList,updateIngredientList] = useState([]);\n  const [Loading,setLoading] = useState(false);\n  const API_Key = \"4e4424bdcfbc0f52c47ae286eab753c3\";\n  const API_Id = \"3ab69421\";\n  \n\n\n  const SearchForRecipe =(query)=>{\n    setLoading(true);\n    let url = `search?q=${query}&app_id=${API_Id}&app_key=${API_Key}`;\n    fetch(url).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res);\n      console.log(res.hits);\n      updateIngredientList(res.hits);\n      setLoading(false);\n    })\n    .catch(err => {\n      console.log(\"error\", err);\n      setLoading(false);\n    })\n  }\n  useEffect(() => {\n    \nSearchForRecipe('chicken');\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div class=\"InputWrapper\">\n          <input ref={InputRef } type=\"text\" placeholder=\"Search for a recipe\"></input>\n          <button onClick={search} >Search</button>\n        </div>\n        {Loading && <p>Loading...</p>}\n        <div className=\"Wrapper\">\n          {ingredientList.map(item => {\n            return (\n              <div  key={item.recipe.label} className=\"Ingredient\">\n                <span>{item.recipe.label}</span>\n                <img src={item.recipe.image}/>\n                <div  className=\"Steps\">\n                {item.recipe.ingredientLines.map((step,index)=>{\n                      return <p key={index}>{step}</p>;\n                })}\n                </div>\n                </div>\n    \n            );\n          })}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}